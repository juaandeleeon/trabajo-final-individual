
# Este codigo simula un controlador de tr√°fico a√©reo en el Aeropuerto de Lanzarote

import multiprocessing
import threading
import asyncio
import time
import random
import tkinter as tk
from tkinter import ttk, scrolledtext
from queue import Empty

NUM_PISTAS = 1 
TIEMPO_ATERRIZAJE = (2.5, 5)  
TIEMPO_ESPERA_EVENTO = (5, 10) 
AVIONES = [f"Flight-LZ{i:03}" for i in range(10)]  

semaforo_pista = threading.Semaphore(NUM_PISTAS) 
cola_aterrizaje = multiprocessing.Queue()  

class Interfaz:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üõ¨ Aeropuerto de Lanzarote - Simulador de Tr√°fico A√©reo")
        self.root.geometry("800x600")
        self.root.configure(bg="#f0f4f7")

        self.frame_superior = tk.Frame(self.root, bg="#003366", height=60)
        self.frame_superior.pack(fill=tk.X)
        self.label_titulo = tk.Label(
            self.frame_superior,
            text="üõ©Ô∏è Control A√©reo Lanzarote",
            font=("Arial", 18, "bold"),
            fg="white",
            bg="#003366")
        self.label_titulo.pack(pady=10)

        self.text_area = scrolledtext.ScrolledText(
            self.root, wrap=tk.WORD, font=("Courier", 11), bg="white")
        self.text_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        self.text_area.configure(state='disabled')

        self.frame_botones = tk.Frame(self.root, bg="#f0f4f7")
        self.frame_botones.pack(pady=10)

        self.boton_iniciar = ttk.Button(
            self.frame_botones, text="üöÄ Iniciar Simulaci√≥n", command=self.iniciar_simulacion)
        self.boton_iniciar.grid(row=0, column=0, padx=10)

        self.boton_salir = ttk.Button(
            self.frame_botones, text="‚ùå Salir", command=self.root.quit)
        self.boton_salir.grid(row=0, column=1, padx=10)

    def mostrar(self, mensaje):
        self.text_area.configure(state='normal')
        self.text_area.insert(tk.END, mensaje + "\n")
        self.text_area.see(tk.END)
        self.text_area.configure(state='disabled')

    def iniciar_simulacion(self):
        self.boton_iniciar.configure(state='disabled')
        thread_simulacion = threading.Thread(target=main_simulacion)
        thread_simulacion.start()

    def iniciar(self):
        self.root.mainloop()

interfaz = Interfaz()

def avion(nombre, cola):
    cola.put(nombre)

def torre_control(cola):
    aterrizados = []
    while len(aterrizados) < len(AVIONES):
        try:
            avion = cola.get(timeout=5)
        except Empty:
            continue

        interfaz.mostrar(f"Torre: {avion} solicita permiso para aterrizar en Pista 1...")
        semaforo_pista.acquire()  

        interfaz.mostrar(f"Torre: Autorizado {avion} para aterrizar en Lanzarote (Pista 1)")
        tiempo = random.uniform(*TIEMPO_ATERRIZAJE)
        time.sleep(tiempo)
        interfaz.mostrar(f"{avion} ha aterrizado con √©xito en {tiempo:.2f} s (Pista 1)")

        semaforo_pista.release()  
        aterrizados.append(avion)

    interfaz.mostrar("Torre de control: Todos los vuelos han aterrizado correctamente.")

async def eventos_emergencia():
    emergencias = [
        "viento cruzado fuerte",
        "alerta por dron",
        "pasajero con emergencia m√©dica",
        "p√°jaro en pista"
    ]
    for _ in range(3):
        await asyncio.sleep(random.randint(*TIEMPO_ESPERA_EVENTO))
        evento = random.choice(emergencias)
        interfaz.mostrar(f"EMERGENCIA: {evento.upper()} - posibles retrasos")
        await asyncio.sleep(2)
        interfaz.mostrar(f"Emergencia resuelta: {evento}")

def main_simulacion():
    procesos_aviones = []

    torre = threading.Thread(target=torre_control, args=(cola_aterrizaje,))
    torre.start()

    for nombre in AVIONES:
        p = multiprocessing.Process(target=avion, args=(nombre, cola_aterrizaje))
        p.start()
        procesos_aviones.append(p)

    def lanzar_eventos():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(eventos_emergencia())
        finally:
            loop.close()
            interfaz.mostrar("Fin del monitoreo de emergencias.\n")

    eventos_thread = threading.Thread(target=lanzar_eventos)
    eventos_thread.start()

    def esperar_final():
        for p in procesos_aviones:
            p.join()
        torre.join()
        eventos_thread.join()
        interfaz.mostrar("Todos los vuelos han sido gestionados. Operaci√≥n en Lanzarote finalizada.")

    cierre_thread = threading.Thread(target=esperar_final)
    cierre_thread.start()

if __name__ == '__main__':
    multiprocessing.freeze_support()
    interfaz.iniciar()
